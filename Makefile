#
# Makefile: Commands to simplify development
#

# This Makefile only works with GNU Make.

PYTHON = python3.11
PROJECT_NAME = webapp

# Where everything lives
site_python := /usr/bin/env $(PYTHON)

root_dir := $(realpath .)
site_dir = $(root_dir)/project

venv_name = venv
venv_dir = $(root_dir)/$(venv_name)
python := $(venv_dir)/bin/python

pip = $(python) -m pip
pip-compile = $(venv_dir)/bin/pip-compile
pip-sync = $(venv_dir)/bin/pip-sync
django = $(python) $(root_dir)/manage.py
flake8 = $(python) -m flake8
black = $(python) -m black
isort = $(python) -m isort
mypy = $(python) -m mypy
pytest = $(python) -m pytest
coverage = $(python) -m coverage

# Options or flags
pytest_opts :=

# If you are using dotenv then all the environment variables defined in
# any envfile (.env) will also be available.

# Set environment variables used by the postgresql commands to connect
# to the database. PGPASSWORD is particularly useful to avoid having to
# enter it for each command. You will need to configure the server to
# allow username/password (md5) authentication on local (socket)
# connections and so avoid having to su to the postgres user first.
#
# /etc/postgresql/<version>/main/pg_hba.conf
# local    all    all    md5
#
# For more info on environment variables see,
# https://www.postgresql.org/docs/current/libpq-envars.html

export PGHOST=localhost
export PGPORT=5432
export PGUSER=postgres
export PGPASSWORD=postgres

# The file to load when rebuilding the database. Either plain text or
# compressed (gzipped) files may be used. Other formats are not supported.
# Override this in any included makefile to change the location of the file.
db_dump = $(DB_NAME).psql

# include additional targets or override variables from local makefiles
-include *.mk

.PHONY: help
help:
	@echo "Please use 'make <target>' where <target> is one of:"
	@echo
	@echo "  checks               to run all code checks"
	@echo "  clean                to clean everything"
	@echo "  coverage             to measure the test coverage"
	@echo "  db                   to initialize the database from a backup"
	@echo "  help                 to show this list"
	@echo "  tests                to run the tests"
	@echo "  venv                 to create or update the virtualenv"
	@echo
	@echo "Shortcuts for Django management commands:"
	@echo
	@echo "  messages             to extract the strings for translation"
	@echo "  translations         to compile the translations"
	@echo

# #########
#   Clean
# #########
#
# Delete all the runtime files generated by the various targets,
# including the virtualenv.

.PHONY: clean-dotenv
clean-dotenv:
	rm -f .env

.PHONY: clean-venv
clean-venv:
	rm -rf $(venv_dir)

.PHONY: clean-tests
clean-tests:
	rm -rf .pytest_cache

.PHONY: clean-mypy
clean-mypy:
	rm -rf .mypy_cache

.PHONY: clean-coverage
clean-coverage:
	rm -rf .coverage
	rm -rf coverage

.PHONY: clean
clean: clean-dotenv clean-venv clean-tests clean-mypy clean-coverage

# #########################
#   Environment Variables
# #########################
#
# Set the variable WEB_APP_NAME when calling this target. It is used
# to set the database user and password, the database name, the rabbitmq
# username and password, the rabbitmq virtual host and the celery app
# name. For example: make .env WEB_APP_NAME=mysite

.env: clean-dotenv
	@export DJANGO_SECRET_KEY="$(shell python ./scripts/generate_secret_key.py)" && \
	envsubst < .env.template > .env

# ##############
#   Virtualenv
# ##############
#
# Create the virtualenv and install all the dependencies for development.
# If the virtualenv already exists then synchronise the installed packages
# with those listed in requirements/dev.txt. The list of packages will be
# updated if any of the input files change.
#
# pip-tools is pinned to version 6.10.0 as 6.11.0 bumped the required version
# of click to be version 8 or higher which is incompatible with the version
# installed by celery 5.0. It's simpler, for now, to pin the pip-tools version
# rather than recompile the requirements files. That would introduce another
# incompatibility between flake8 and the pytest-flake8 plugin which although
# documented as fixed, remains. See https://github.com/PyCQA/flake8/issues/367

$(venv_dir):
	$(site_python) -m venv $(venv_dir)
	$(site_python) -m pip install --upgrade pip setuptools wheel
	$(site_python) -m pip install pip-tools==6.10.0

requirements/dev.txt: requirements/dev.in requirements/site.in requirements/tests.in
	$(pip-compile) requirements/dev.in

requirements/site.txt: requirements/site.in
	$(pip-compile) requirements/site.in

requirements/tests.txt: requirements/site.in requirements/tests.in
	$(pip-compile) requirements/tests.in

.PHONY: requirements
requirements: requirements/dev.txt requirements/site.txt requirements/tests.txt

.PHONY: venv
venv: $(venv_dir) requirements
	$(pip-sync) requirements/dev.txt

# ############
#   Database
# ############
#
# Targets for initializing the database and restoring the database
# from a database dump.

.PHONY: db-user
db-user:
	psql --command "create role $(DB_USER) with password '$(DB_PASSWORD)' login createdb;"

.PHONY: db-create
db-create:
	createdb --owner $(DB_USER) $(DB_NAME)

.PHONY: db-init
db-init: db-user db-create

.PHONY: db-drop
db-drop:
	dropdb --if-exists $(DB_NAME)

.PHONY: db-dump
db-dump:
	pg_dump --compress 9 --file $(DB_NAME).sql.gz $(DB_NAME)

# GNU Make has the .ONESHELL directive which would let the following
# target be invoke will all the lines from the recipe and so you would
# not need the trailing slashes.

.PHONY: db-load
db-load:
	if (file $(db_dump) | grep -q compressed); then \
		gunzip < $(db_dump) | psql $(DB_NAME); \
	else \
		psql -f $(db_dump) $(DB_NAME); \
	fi

# Scrub the database to remove any awkward situations, like sending
# production users emails from development

.PHONY: db-scrub
db-scrub:
	psql --command "" $(DB_NAME)

.PHONY: db
db: db-drop db-create db-load db-scrub

# ##################
#   Message Broker
# ##################

.PHONY: broker-clean
broker-clean:
	sudo rabbitmqctl delete_user $(WEB_APP_NAME)
	sudo rabbitmqctl delete_vhost $(WEB_APP_NAME)

.PHONY: broker-init
broker-init:
	sudo rabbitmqctl add_user $(WEB_APP_NAME) $(WEB_APP_NAME)
	sudo rabbitmqctl set_permissions -p $(WEB_APP_NAME) $(WEB_APP_NAME) ".*" ".*" ".*"
	sudo rabbitmqctl add_vhost $(WEB_APP_NAME)

# #########
#   Tests
# #########

.PHONY: tests
tests:
	$(pytest) $(pytest_opts)

# ############
#   Coverage
# ############

.PHONY: coverage
coverage:
	$(pytest) --cov=lynx --cov-report html

# ##########
#   Checks
# ##########

.PHONY: flake8
flake8:
	$(flake8) $(site_dir)

.PHONY: isort
isort:
	$(isort) --check $(site_dir)

.PHONY: black
black:
	$(black) --check $(site_dir)

.PHONY: mypy
mypy:
	$(mypy) $(site_dir)

.PHONY: checks
checks: flake8 black isort mypy

# ##########
#   Django
# ##########
#
# The various management commands for Django are simple to run
# so here only the commands that depend on the project layout,
# specifically which directories to ignore, are included.
#

.PHONY: messages
messages:
	cd project && \
	$(django) makemessages --no-obsolete --all

.PHONY: translations
translations:
	cd project && \
	$(django) compilemessages
